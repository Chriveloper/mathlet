---
import ThemeToggle from '../theme-toggle.astro';
---

<script>
  const navToggle = document.getElementById('nav-toggle');
  const navContent = document.getElementById('nav-content');
  const menuIcon = document.getElementById('menu-icon');

  navToggle?.addEventListener('click', () => {
    navContent?.classList.toggle('hidden');
    // Toggle between menu and close icons
    if (menuIcon) {
      menuIcon.textContent = menuIcon.textContent === 'menu' ? 'close' : 'menu';
    }
  });
</script>

<nav class="bg-background p-4 border-b border-border">
  <div class="container mx-auto flex justify-between items-center">
    <!-- Logo/Brand -->
    <a href="/" class="text-primary font-bold text-xl">Mathlet</a>

    <!-- Mobile Menu Button -->
    <div class="flex items-center gap-2 md:hidden">
      <button 
        onclick="toggleTheme()"
        class="p-2 text-foreground hover:text-primary transition-colors"
        aria-label="Toggle theme"
      >
        <span id="mobile-theme-icon-light" class="material-symbols-outlined">light_mode</span>
        <span id="mobile-theme-icon-dark" class="material-symbols-outlined">dark_mode</span>
      </button>
      <button id="nav-toggle" class="text-primary">
        <span id="menu-icon" class="material-symbols-outlined">menu</span>
      </button>
    </div>

    <!-- Navigation Links -->
    <div id="nav-content" class="hidden md:flex md:items-center md:space-x-4 absolute md:relative top-16 md:top-0 left-0 right-0 bg-background md:bg-transparent p-4 md:p-0 shadow-md md:shadow-none">
      <a href="/" class="block md:inline-block py-2 px-4 text-foreground hover:text-primary transition-colors">Home</a>
      <a href="/kontakt" class="block md:inline-block py-2 px-4 text-foreground hover:text-primary transition-colors">Kontakt</a>
      <a href="/ankuendigungen" class="block md:inline-block py-2 px-4 text-foreground hover:text-primary transition-colors">Ankündigungen</a>
      <a href="/foerderung" class="block md:inline-block py-2 px-4 text-foreground hover:text-primary transition-colors">Förderung</a>
      <a href="/materialien" class="block md:inline-block py-2 px-4 text-foreground hover:text-primary transition-colors">Materialien</a>
      
      <!-- Theme Toggle (Desktop) -->
      <button 
        onclick="toggleTheme()"
        class="hidden md:block p-2 text-foreground hover:text-primary transition-colors"
        aria-label="Toggle theme"
      >
        <span id="desktop-theme-icon-light" class="material-symbols-outlined">light_mode</span>
        <span id="desktop-theme-icon-dark" class="material-symbols-outlined">dark_mode</span>
      </button>
    </div>
  </div>
</nav>

<!-- Google Material Icons -->
<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@24,400,0,0" />

<script is:inline>
  // Wait for DOM content to be loaded
  document.addEventListener('DOMContentLoaded', () => {
    console.log("📱 Navbar DOM loaded, setting up theme icon handlers");
    
    // Function to update icons based on current theme
    function updateThemeIcons() {
      const isDark = document.documentElement.classList.contains('dark');
      console.log(`🎭 Updating theme icons to match ${isDark ? 'dark' : 'light'} mode`);
      
      // Get all icon elements
      const mobileLight = document.getElementById('mobile-theme-icon-light');
      const mobileDark = document.getElementById('mobile-theme-icon-dark');
      const desktopLight = document.getElementById('desktop-theme-icon-light');
      const desktopDark = document.getElementById('desktop-theme-icon-dark');
      
      // Validate elements exist before updating
      if (mobileLight && mobileDark) {
        mobileLight.style.display = isDark ? 'block' : 'none';
        mobileDark.style.display = isDark ? 'none' : 'block';
        console.log(`📱 Mobile icons updated: showing ${isDark ? 'light' : 'dark'} icon`);
      } else {
        console.warn("⚠️ Mobile theme icons not found!");
      }
      
      if (desktopLight && desktopDark) {
        desktopLight.style.display = isDark ? 'block' : 'none';
        desktopDark.style.display = isDark ? 'none' : 'block';
        console.log(`🖥️ Desktop icons updated: showing ${isDark ? 'light' : 'dark'} icon`);
      } else {
        console.warn("⚠️ Desktop theme icons not found!");
      }
    }
    
    // Initial update
    updateThemeIcons();
    
    // Listen for theme toggle button clicks
    const themeButtons = document.querySelectorAll('[onclick="toggleTheme()"]');
    themeButtons.forEach(button => {
      button.addEventListener('click', () => {
        console.log("🖱️ Theme toggle button clicked");
        setTimeout(updateThemeIcons, 0); // Update after state change
      });
    });
    
    // Listen for custom theme change events
    document.addEventListener('themeChanged', (e) => {
      console.log(`📣 Theme change event received: ${e.detail.isDark ? 'dark' : 'light'}`);
      updateThemeIcons();
    });
    
    // Listen for the class change on html element directly
    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (mutation.attributeName === 'class') {
          console.log("👀 Detected class change on HTML element");
          updateThemeIcons();
        }
      });
    });
    
    observer.observe(document.documentElement, { attributes: true });
  });
</script>

<ThemeToggle />